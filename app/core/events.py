from sqlalchemy import event
from sqlalchemy.orm import Session
from app.core.db import SessionLocal
from app.models.user_group_association import UserGroupAssociation
from app.models.group import Group
import logging

logger = logging.getLogger(__name__)

# 1Ô∏è‚É£ –ü–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º —Å–≤—è–∑–∏ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º ID –≥—Ä—É–ø–ø—ã
@event.listens_for(UserGroupAssociation, "before_delete")
def track_deleted_group_ids(mapper, connection, target):
    session = Session.object_session(target)
    if session:
        if not hasattr(session, "_deleted_group_ids"):
            session._deleted_group_ids = set()
        session._deleted_group_ids.add(target.vk_group_id)

# 2Ô∏è‚É£ –ü–æ—Å–ª–µ –∫–æ–º–º–∏—Ç–∞ —É–¥–∞–ª—è–µ–º –≥—Ä—É–ø–ø—ã, –µ—Å–ª–∏ —É –Ω–∏—Ö –±–æ–ª—å—à–µ –Ω–µ—Ç —Å–≤—è–∑–µ–π
@event.listens_for(Session, "after_commit")
def after_commit_user_group_association(session):
    if not hasattr(session, "_deleted_group_ids"):
        return

    group_ids_to_check = session._deleted_group_ids

    with SessionLocal() as new_session:
        for vk_group_id in group_ids_to_check:
            remaining_associations = new_session.query(UserGroupAssociation).filter_by(vk_group_id=vk_group_id).count()

            logger.info(f"üîç –û—Å—Ç–∞–ª–æ—Å—å —Å–≤—è–∑–µ–π —Å –≥—Ä—É–ø–ø–æ–π {vk_group_id}: {remaining_associations}")

            if remaining_associations == 0:
                logger.info(f"‚ùå –ì—Ä—É–ø–ø–∞ {vk_group_id} –±–æ–ª—å—à–µ –Ω–µ —Å–≤—è–∑–∞–Ω–∞ –Ω–∏ —Å –æ–¥–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –£–¥–∞–ª—è–µ–º...")
                new_session.query(Group).filter_by(vk_group_id=vk_group_id).delete()
                new_session.commit()
                logger.info(f"‚úÖ –ì—Ä—É–ø–ø–∞ {vk_group_id} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")

    # –û—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ ID
    session._deleted_group_ids.clear()
