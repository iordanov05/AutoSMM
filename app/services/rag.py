import logging
from sqlalchemy.orm import Session
from app.models.post import Post
from app.models.group import Group
from app.models.product import Product
from app.models.service import Service
from langchain_chroma import Chroma
from langchain_openai import ChatOpenAI
from langchain_huggingface import HuggingFaceEmbeddings
from langchain_core.documents import Document
from app.core.config import CHROMA_DB_PATH, DEEPSEEK_MODEL, OPENROUTER_API_KEY

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ChromaDB
vectorstore = Chroma(
    persist_directory=CHROMA_DB_PATH,
    embedding_function=HuggingFaceEmbeddings(model_name="sentence-transformers/all-MiniLM-L6-v2")
)
try:
    vectorstore.get()
except ValueError:
    logger.warning("‚ö†Ô∏è –ö–æ–ª–ª–µ–∫—Ü–∏—è ChromaDB –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –ü–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º...")
    vectorstore.reset_collection()

# –ü–æ–¥–∫–ª—é—á–∞–µ–º DeepSeek —á–µ—Ä–µ–∑ OpenRouter
llm = ChatOpenAI(
    openai_api_key=OPENROUTER_API_KEY,
    base_url="https://openrouter.ai/api/v1",
    model_name=DEEPSEEK_MODEL,
    temperature=0.5,
    max_tokens=1000
)

def save_group_data(db: Session, user_id: int, data: dict):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –≥—Ä—É–ø–ø–µ, –ø–æ—Å—Ç–∞—Ö, —Ç–æ–≤–∞—Ä–∞—Ö –∏ —É—Å–ª—É–≥–∞—Ö –≤ PostgreSQL –∏ ChromaDB.
    """
    group = db.query(Group).filter(
        Group.vk_group_id == data["community"]["id"],
        Group.user_id == user_id
    ).first()

    if not group:
        group = Group(
            user_id=user_id,
            vk_group_id=data["community"]["id"],
            name=data["community"]["name"],
            description=data["community"]["description"],
            subscribers_count=data["community"]["subscribers_count"],
            category=data["community"]["category"],
        )
        db.add(group)
        db.commit()
        db.refresh(group)

    # –û—á–∏—â–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ—Å—Ç–æ–≤, —Ç–æ–≤–∞—Ä–æ–≤ –∏ —É—Å–ª—É–≥ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º
    existing_posts = {p.text for p in db.query(Post).filter(Post.group_id == group.id).all()}
    existing_products = {p.name for p in db.query(Product).filter(Product.group_id == group.id).all()}
    existing_services = {s.name for s in db.query(Service).filter(Service.group_id == group.id).all()}

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã
    for post in data["posts"]:
        if post["text"] not in existing_posts:
            new_post = Post(
                user_id=user_id,
                group_id=group.id,
                text=post["text"],
                likes=post["likes"],
                comments=post["comments"],
                reposts=post["reposts"],
            )
            db.add(new_post)

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã
    for product in data["products"]:
        if product["name"] not in existing_products:
            new_product = Product(
                group_id=group.id,
                name=product["name"],
                description=product["description"],
                price=product["price"],
            )
            db.add(new_product)

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —É—Å–ª—É–≥–∏
    for service in data["services"]:
        if service["name"] not in existing_services:
            new_service = Service(
                group_id=group.id,
                name=service["name"],
                description=service["description"],
                price=service["price"],
            )
            db.add(new_service)

    db.commit()

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è ChromaDB
    past_posts = db.query(Post).filter(Post.group_id == group.id).all()
    post_styles = "\n\n".join([f"üìù {p.text}" for p in past_posts[-5:]]) if past_posts else "–ù–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤."

    products = db.query(Product).filter(Product.group_id == group.id).all()
    services = db.query(Service).filter(Service.group_id == group.id).all()

    context_data = f"""
    –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã: {group.name}
    –û–ø–∏—Å–∞–Ω–∏–µ: {group.description}
    –ü–æ–¥–ø–∏—Å—á–∏–∫–∏: {group.subscribers_count}
    –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {group.category}

    –¢–æ–≤–∞—Ä—ã:
    """ + "\n".join([f"{p.name} - {p.description} (–¶–µ–Ω–∞: {p.price})" for p in products]) + """

    –£—Å–ª—É–≥–∏:
    """ + "\n".join([f"{s.name} - {s.description} (–¶–µ–Ω–∞: {s.price})" for s in services]) + """

    –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª—ã—Ö –ø–æ—Å—Ç–æ–≤:
    """ + post_styles

    logger.info("üóëÔ∏è –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ ChromaDB...")
    vectorstore.reset_collection()

    document = Document(
        page_content=context_data,
        metadata={"group_id": group.id}
    )
    vectorstore.add_documents([document])

    logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ –æ –≥—Ä—É–ø–ø–µ, —Ç–æ–≤–∞—Ä–∞—Ö –∏ —É—Å–ª—É–≥–∞—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ ChromaDB!")
    logger.info(f"üìå –°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:\n{context_data}")

    return {"message": "‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑–µ"}

def generate_post_from_context(db: Session, query: str, group_id: int, history: str = "") -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ—Å—Ç —Å —É—á–µ—Ç–æ–º (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π) –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞ –∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ ChromaDB.
    """
    retriever = vectorstore.as_retriever()

    try:
        results = retriever.invoke(query)
    except ValueError:
        logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞! ChromaDB –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–∞—è –¥–ª—è group_id={group_id}.")
        return "–û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ ChromaDB."

    unique_results = list(set([res.page_content for res in results]))
    context_texts = "\n\n".join(unique_results)

    prompt = f"""
    –¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥—É. –ù–∞–ø–∏—à–∏ —Ä–µ–∫–ª–∞–º–Ω—ã–π –ø–æ—Å—Ç —Å —É—á–µ—Ç–æ–º –ø—Ä–æ—à–ª—ã—Ö –ø–æ—Å—Ç–æ–≤, –¥–∞–Ω–Ω—ã—Ö –æ –≥—Ä—É–ø–ø–µ –∏ –∏—Å—Ç–æ—Ä–∏–∏ –æ–±—â–µ–Ω–∏—è.
    
    üîπ –ò—Å—Ç–æ—Ä–∏—è –æ–±—â–µ–Ω–∏—è:
    {history}

    üîπ –î–∞–Ω–Ω—ã–µ –æ –≥—Ä—É–ø–ø–µ:
    {context_texts}

    üîπ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç: "{query}"

    ‚ùó –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å—Ç–∏–ª—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø—Ä–æ—à–ª—ã—Ö –ø–æ—Å—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ, —Ö–µ—à—Ç–µ–≥–∏ –∏ —Ç–æ–Ω –æ–±—â–µ–Ω–∏—è.
    ‚ùó –î–æ–±–∞–≤–ª—è–π —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∏ —É—Å–ª—É–≥–∏ –∏–∑ —Å–ø–∏—Å–∫–∞.
    ‚ùó –ü–∏—à–∏ –ø–æ—Å—Ç –±–µ–∑ –∫–æ–º–∞–Ω–¥ –∏ –ø–æ—è—Å–Ω–µ–Ω–∏–π, —Ç–æ–ª—å–∫–æ —Å–∞–º —Ç–µ–∫—Å—Ç.
    """

    logger.info(f"üì¢ [group_id={group_id}] –ü–µ—Ä–µ–¥–∞—ë–º –∑–∞–ø—Ä–æ—Å –≤ DeepSeek...")
    logger.debug(f"–ó–∞–ø—Ä–æ—Å:\n{prompt}")

    response = llm.invoke(prompt)
    return response.content.strip()
