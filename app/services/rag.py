import logging
from datetime import datetime, timezone
from sqlalchemy.orm import Session
from app.models.post import Post
from app.models.group import Group
from app.models.product import Product
from app.models.service import Service
from langchain_chroma import Chroma
from langchain_openai import ChatOpenAI
from langchain_huggingface import HuggingFaceEmbeddings
from langchain_core.documents import Document
from app.models.user_group_association import UserGroupAssociation
from app.core.config import CHROMA_DB_PATH, AI_MODEL, OPENROUTER_API_KEY

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LLM
llm = ChatOpenAI(
    openai_api_key=OPENROUTER_API_KEY,
    base_url="https://openrouter.ai/api/v1",
    model_name=AI_MODEL,
    temperature=0.5,
    max_tokens=3000
)

def save_group_data(db: Session, user_id: int, data: dict):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –≥—Ä—É–ø–ø–µ, –ø–æ—Å—Ç–∞—Ö, —Ç–æ–≤–∞—Ä–∞—Ö –∏ —É—Å–ª—É–≥–∞—Ö –≤ PostgreSQL –∏ –∏–Ω–¥–µ–∫—Å–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ ChromaDB.
    """
    last_uploaded_at = datetime.now(timezone.utc)

    vk_group_id = data["community"].get("id")
    if not vk_group_id:
        logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω vk_group_id –≤ –¥–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ—Å—Ç–≤–∞!")
        return {"status": "error", "message": "–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç vk_group_id"}
    
    group = db.query(Group).filter(Group.vk_group_id == vk_group_id).first()

    if not group:
        group = Group(
            vk_group_id=vk_group_id,
            name=data["community"]["name"],
            description=data["community"].get("description"),
            category=data["community"].get("category"),
            subscribers_count=data["community"].get("subscribers_count"),
        )
        db.add(group)
        db.commit()
        db.refresh(group)

    association = db.query(UserGroupAssociation).filter(
        UserGroupAssociation.user_id == user_id,
        UserGroupAssociation.vk_group_id == vk_group_id
    ).first()

    if not association:
        association = UserGroupAssociation(
            user_id=user_id,
            vk_group_id=vk_group_id,
            last_uploaded_at=last_uploaded_at
        )
        db.add(association)
    else:
        association.last_uploaded_at = last_uploaded_at

    db.commit()

    # üöÄ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å—Ç—ã
    existing_posts = {p.text for p in db.query(Post).filter(Post.group_id == vk_group_id).all()}
    
    for post in data["posts"]:
        text = post["text"].strip()

        if text not in existing_posts:
            new_post = Post(
                group_id=vk_group_id,
                text=text,
                likes=post.get("likes", 0),
                comments=post.get("comments", 0),
                reposts=post.get("reposts", 0),
            )
            db.add(new_post)

    # ‚úÖ **–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–≤–∞—Ä—ã (products)**
    existing_products = {p.name for p in db.query(Product).filter(Product.group_id == vk_group_id).all()}
    
    for product in data["products"]:
        name = product["name"].strip()
        if name not in existing_products:
            new_product = Product(
                group_id=vk_group_id,
                name=name,
                description=product.get("description", "").strip(),
                price=product.get("price", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
            )
            db.add(new_product)

    # ‚úÖ **–°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Å–ª—É–≥–∏ (services)**
    existing_services = {s.name for s in db.query(Service).filter(Service.group_id == vk_group_id).all()}
    
    for service in data["services"]:
        name = service["name"].strip()
        if name not in existing_services:
            new_service = Service(
                group_id=vk_group_id,
                name=name,
                description=service.get("description", "").strip(),
                price=service.get("price", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
            )
            db.add(new_service)

    db.commit()

    return {
        "status": "success",
        "message": "‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑–µ",
        "group": {
            "vk_group_id": vk_group_id,
            "name": group.name,
            "description": group.description,
            "category": group.category,
            "subscribers_count": group.subscribers_count,
            "last_uploaded_at": last_uploaded_at.isoformat()
        }
    }


def get_group_vectorstore(vk_group_id: int) -> Chroma:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä ChromaDB –¥–ª—è —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏–∏, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–º –Ω–∞ vk_group_id.
    """
    collection_name = f"group_{vk_group_id}"
    vectorstore = Chroma(
        persist_directory=CHROMA_DB_PATH,
        collection_name=collection_name,
        embedding_function=HuggingFaceEmbeddings(model_name="sentence-transformers/all-MiniLM-L6-v2")
    )
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–ª–ª–µ–∫—Ü–∏—è
        vectorstore.get()
    except ValueError:
        logger.warning(f"‚ö†Ô∏è –ö–æ–ª–ª–µ–∫—Ü–∏—è {collection_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é...")
        vectorstore.reset_collection()
    return vectorstore

def generate_post_from_context(db: Session, query: str, vk_group_id: int, history: str = "") -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ ChromaDB –¥–ª—è —Å–æ–æ–±—â–µ—Å—Ç–≤–∞.
    –ï—Å–ª–∏ –ø–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è fallback-–ø–æ–∏—Å–∫ –ø–æ –ø—É—Å—Ç–æ–º—É –∑–∞–ø—Ä–æ—Å—É.
    """
    vectorstore = get_group_vectorstore(vk_group_id)
    retriever = vectorstore.as_retriever(search_kwargs={"k": 5})
    
    try:
        results = retriever.invoke(query)
        docs = results if isinstance(results, list) else [results]
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(docs)} –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: {query}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –¥–ª—è vk_group_id {vk_group_id}: {e}")
        docs = []
    
    if not docs or all(not doc.page_content.strip() for doc in docs):
        logger.warning(f"–ù–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è vk_group_id {vk_group_id} –ø–æ –∑–∞–ø—Ä–æ—Å—É: {query}. –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback.")
        try:
            fallback_results = retriever.invoke("")
            docs = fallback_results if isinstance(fallback_results, list) else [fallback_results]
            logger.info(f"Fallback –Ω–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(docs)}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ fallback –ø–æ–∏—Å–∫–∞: {e}")
            docs = []
    
    context_texts = "\n\n".join([doc.page_content for doc in docs if doc.page_content.strip()])
    if not context_texts.strip():
        context_texts = """
        ‚ùó –£ –Ω–∞—Å –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≥—Ä—É–ø–ø–µ.  
        –ü—Ä–µ–∂–¥–µ —á–µ–º —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∫–ª–∞–º–Ω—ã–π –ø–æ—Å—Ç, —É—Ç–æ—á–Ω–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–ª—é—á–µ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:  
        - –û —á–µ–º —ç—Ç–∞ –≥—Ä—É–ø–ø–∞?  
        - –ö–∞–∫–∏–µ —Ç–æ–≤–∞—Ä—ã –∏–ª–∏ —É—Å–ª—É–≥–∏ –æ–Ω–∞ –ø—Ä–æ–¥–≤–∏–≥–∞–µ—Ç?  
        - –ö–∞–∫–æ–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è –≤ –ø–æ—Å—Ç–∞—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª–µ–Ω? (—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π, –¥—Ä—É–∂–µ—Å–∫–∏–π, —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π)  
        - –ï—Å—Ç—å –ª–∏ –ø—Ä–∏–º–µ—Ä—ã –ø—Ä–æ—à–ª—ã—Ö –ø–æ—Å—Ç–æ–≤ –∏–ª–∏ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤?  

        –ó–∞–ø—Ä–æ—Å–∏ —Ç–æ–ª—å–∫–æ —Ç–æ, —á—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞.  
        –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å—Ä–∞–∑—É —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π –ø—É–±–ª–∏–∫–∞—Ü–∏—é.
        """
    
    prompt = f"""
    –¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥—É –∏ –∫–æ–ø–∏—Ä–∞–π—Ç–∏–Ω–≥—É. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –Ω–∞–ø–∏—Å–∞—Ç—å —Ä–µ–∫–ª–∞–º–Ω—ã–π –ø–æ—Å—Ç –≤ —Å—Ç–∏–ª–µ –ø—Ä–æ—à–ª—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π –≥—Ä—É–ø–ø—ã.

    üîπ **–ò—Å—Ç–æ—Ä–∏—è –æ–±—â–µ–Ω–∏—è (–¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏)**:  
    {history}

    üîπ **–î–∞–Ω–Ω—ã–µ –æ –≥—Ä—É–ø–ø–µ (–≤–∞–∂–Ω–æ —É—á–∏—Ç—ã–≤–∞—Ç—å –ø—Ä–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞)**:  
    {context_texts}

    üîπ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç**:  
    "{query}"

    üìå **–¢–≤–æ–∏ –∑–∞–¥–∞—á–∏**:  
    1Ô∏è) **–°–æ–±–ª—é–¥–∞–π —Å—Ç–∏–ª—å –ø—Ä–æ—à–ª—ã—Ö –ø–æ—Å—Ç–æ–≤**, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å ‚Äî –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä—É, —Ç–æ–Ω –æ–±—â–µ–Ω–∏—è, –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ, —Ö–µ—à—Ç–µ–≥–∏, –¥–ª–∏–Ω—É –∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.  
    2Ô∏è) **–ï—Å–ª–∏ —Å—Ç–∞—Ä—ã—Ö –ø–æ—Å—Ç–æ–≤ –Ω–µ—Ç**, **—Å–∞–º –æ–ø—Ä–µ–¥–µ–ª–∏** –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º –∏ —Å—Ç–∏–ª—å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–º–∞—Ç–∏–∫–∏, —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –≥—Ä—É–ø–ø—ã.  
    3Ô∏è) **–ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∏ —É—Å–ª—É–≥–∏** ‚Äî –Ω–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏—á–µ–≥–æ, —á–µ–≥–æ –Ω–µ—Ç –≤ –≥—Ä—É–ø–ø–µ.  
    4Ô∏è) **–î–µ–ª–∞–π —Ç–µ–∫—Å—Ç –∂–∏–≤—ã–º –∏ –≤–æ–≤–ª–µ–∫–∞—é—â–∏–º** ‚Äî –æ–Ω –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–≤–ª–µ–∫–∞—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏.  
    5Ô∏è) **–î–æ–±–∞–≤—å –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é** ‚Äî –º–æ—Ç–∏–≤–∏—Ä—É–π –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è, –∫—É–ø–∏—Ç—å, –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å.  
    6Ô∏è) **–û—Ä–∏–µ–Ω—Ç–∏—Ä—É–π—Å—è –Ω–∞ –æ–±—ä–µ–º –ø—Ä–æ—à–ª—ã—Ö –ø–æ—Å—Ç–æ–≤**:  
    - –ï—Å–ª–∏ —Ä–∞–Ω—å—à–µ –ø–æ—Å—Ç—ã –±—ã–ª–∏ –∫–æ—Ä–æ—Ç–∫–∏–µ, —Å–¥–µ–ª–∞–π –∫—Ä–∞—Ç–∫–∏–π –∏ –ª–∞–∫–æ–Ω–∏—á–Ω—ã–π —Ç–µ–∫—Å—Ç.  
    - –ï—Å–ª–∏ –≤ –≥—Ä—É–ø–ø–µ –ø—Ä–µ–æ–±–ª–∞–¥–∞—é—Ç –¥–ª–∏–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã, –ø–∏—à–∏ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ.  
    - **–ï—Å–ª–∏ —Å—Ç–∞—Ä—ã—Ö –ø–æ—Å—Ç–æ–≤ –Ω–µ—Ç ‚Äî –æ—Ü–µ–Ω–∏ —Å–∏—Ç—É–∞—Ü–∏—é —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –∏ –≤—ã–±–µ—Ä–∏ –ª—É—á—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç.**  
    7Ô∏è) **–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã –∏ –ø–æ—è—Å–Ω–µ–Ω–∏—è, –Ω–µ —Ä–∞—Å–ø–∏—Å—ã–≤–∞–π —Å–≤–æ–∏ —à–∞–≥–∏** ‚Äî —Å—Ä–∞–∑—É –ø–∏—à–∏ –≥–æ—Ç–æ–≤—ã–π —Ä–µ–∫–ª–∞–º–Ω—ã–π –ø–æ—Å—Ç.

    üì£ **–ì–µ–Ω–µ—Ä–∏—Ä—É–π –ø–æ—Å—Ç –∫–∞–∫ –∂–∏–≤–æ–π —Ç–µ–∫—Å—Ç, –±—É–¥—Ç–æ –µ–≥–æ –Ω–∞–ø–∏—Å–∞–ª SMM-–º–µ–Ω–µ–¥–∂–µ—Ä –≥—Ä—É–ø–ø—ã.**  
    """

    
    logger.info(f"üì¢ [vk_group_id={vk_group_id}] –ü–µ—Ä–µ–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –≤ {AI_MODEL}:\n{prompt}")

    response = llm.invoke(prompt)
    return response.content.strip()
